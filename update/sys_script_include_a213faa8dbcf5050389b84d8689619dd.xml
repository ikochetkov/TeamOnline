<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_aaro2_teamonline.MomentsUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>MomentsUtil</name>
        <script><![CDATA[var MomentsUtil = Class.create();
MomentsUtil.prototype = {
  initialize: function () {
    this.MOMENTS_TABLE = "x_aaro2_teamonline_moment"
    this.MOMENT_IMAGE_TABLE = "x_aaro2_teamonline_moment_image"
    this.MOMENT_COMMENTS_TABLE = "x_aaro2_teamonline_moment_comment"
  },
  getFilteredNext: function (filter, lastDateTime, limit, skipRejected) {
    var query = filter + (lastDateTime ? '^sys_created_on<' + lastDateTime : '');

    return this._getMoments(query, limit, skipRejected)
  },
  getUserStore: function (user_sys_id) {
    var userGr = new GlideRecord('sys_user');
    userGr.get(user_sys_id)
    var dept = userGr.department.getRefRecord()
    return { name: '', displayValue: dept.getValue('name'), value: dept.getUniqueValue() }
  },
  getApprovalsCount: function () {
    var approvalsGa = new GlideAggregate(this.MOMENTS_TABLE);
    approvalsGa.addQuery('approval=requested');
    approvalsGa.addAggregate('COUNT');
    approvalsGa.query();
    approvalsGa.next();
    return approvalsGa.getAggregate('COUNT');
  },
  rejectImage: function (imageName) {
    var imageGr = new GlideRecord(this.MOMENT_IMAGE_TABLE);
    imageGr.get('image_name', imageName);
    imageGr.rejected = true;
    imageGr.update();
  },
  sendComment: function (comment, parent, moment) {
    var gr = new GlideRecord(this.MOMENT_COMMENTS_TABLE);
    gr.initialize();
    gr.text = comment;
    gr.parent = parent;
    gr.moment = moment;
    gr.author = gs.getUserID();
    gr.insert()
  },
  _getMoments: function (query, limit, skipRejected) {
    var momentGr = new GlideRecord(this.MOMENTS_TABLE);
    momentGr.addEncodedQuery(query);
    momentGr.orderByDesc('sys_created_on');
    if (limit) momentGr.setLimit(limit);
    momentGr.query();
    moments = []
    while (momentGr.next()) {
      var moment = {};
      moment.attachments = this._getAttachments(momentGr.getUniqueValue(), skipRejected)
      moment.number = momentGr.getValue('number');
      moment.data = {
        sys_id: momentGr.getUniqueValue(),
        caption: momentGr.getValue('caption'),
        approval: momentGr.getValue('approval'),
        store: this._getStore(momentGr.store.getRefRecord()),
        opened_by: {
          id: momentGr.getValue('opened_by'),
          name: momentGr.getDisplayValue('opened_by')
        },
        created_on: momentGr.getValue('sys_created_on')
      };
      moment.comments = this.getComments(momentGr.getUniqueValue());
      moments.push(moment)
    }
    return moments;
  },
  _getAttachments: function (record_sys_id, skipRejected) {
    var attGr = new GlideRecord(this.MOMENT_IMAGE_TABLE);
    attGr.addQuery('moment', record_sys_id);
    if (skipRejected)
      attGr.addEncodedQuery('rejected!=true')
    attGr.query();
    var attachments = []
    while (attGr.next()) {
      attachments.push({
        name: attGr.getValue('image_name'),
        image_url: "/" + attGr.getValue('image_name'),
        thumbnail_url: "/" + attGr.getValue('thumbnail_name'),
        rejected: attGr.getValue('rejected') == "1"
      });
    }
    return attachments
  },
  getComments: function (moment) {
    var comments = []
    var commentGr = new GlideRecord(this.MOMENT_COMMENTS_TABLE);
    commentGr.addEncodedQuery('rejected!=true^parentISEMPTY^moment=' + moment);
    commentGr.orderBy('sys_created_on')
    commentGr.query();
    while (commentGr.next()) {
      var comment = this._getCommentObject(commentGr);
      comment.children = this._getCommentChildren(commentGr.getUniqueValue())
      comments.push(comment);
    }
    return comments;
  },
  _getCommentChildren: function (parent) {
    var comments = [];
    var gr = new GlideRecord(this.MOMENT_COMMENTS_TABLE);
    gr.addQuery('parent', parent);
    gr.addEncodedQuery('rejected!=true^parent=' + parent);
    gr.orderBy('sys_created_on')
    gr.query();
    while (gr.next()) {
      var comment = this._getCommentObject(gr)
      comments.push(comment);
    }
    return comments;
  },
  _getCommentObject: function (commentGr) {
    var author = commentGr.author.getRefRecord();
    var comment = {
      sys_id: commentGr.getUniqueValue(),
      text: commentGr.getValue('text'),
      created_on: commentGr.getValue('sys_created_on'),
      parent: commentGr.getValue('parent'),
      author: {
        name: author.getValue('name'),
        sys_id: author.getUniqueValue(),
        id: author.getValue('user_name'),
        store: author.getValue('company')
      },
      moment: commentGr.getValue('moment'),
    }
    return comment;
  },
  _getStore: function (record) {
    return {
      sys_id: record.getUniqueValue(),
      name: record.getValue('name'),
      description: record.getValue('description')
    }
  },
  approveAction: function (input, record_sys_id, approveState) {
    var apprGr = new GlideRecord('sysapproval_approver');
    apprGr.addQuery('sysapproval', record_sys_id);
    apprGr.addQuery('state', 'requested');
    apprGr.query();
    if (apprGr.next()) {
      apprGr.state = approveState;
      apprGr.update();
    }
    var momGr = new GlideRecord(this.MOMENTS_TABLE);
    momGr.get(record_sys_id);
    momGr.caption = input.approvalMoment ? input.approvalMoment.data.caption : momGr.caption
    momGr.approval = approveState;
    momGr.update()
  },
  create: function (input) {
    var newMomentGr = new GlideRecord(this.MOMENTS_TABLE);
    newMomentGr.initialize();
    newMomentGr.caption = input.caption;
    newMomentGr.store = input.store.value;
    momentSysId = newMomentGr.insert();
    this._createMomentImages(input.thumbnails, input.compressedImages, momentSysId)
  },
  _createMomentImages: function (thumbnails, images, momentSysId) {
    for (var i = 0; i < thumbnails.length; i++) {
      var thumbnailName = this._createDbImage(thumbnails[i], true);
      var imageName = this._createDbImage(images[i]);
      this._createMomentImage(momentSysId, thumbnailName, imageName);
    }


  },
  _createDbImage: function (file, isThumbnail) {
    var dbiGr = new GlideRecord('db_image');
    dbiGr.newRecord()
    var fileName = (isThumbnail ? 'thumbnail' : '') + '_' + dbiGr.sys_id + '_' + file.name;
    dbiGr.name = fileName;
    dbiGr.category = 'teamonline';
    dbiGr.insert();
    var gsa = new GlideSysAttachment();
    var sysid = gsa.writeBase64(dbiGr, fileName, file.type, file.dataURL);
    dbiGr.image = sysid;
    dbiGr.update();
    return fileName;
  },
  _createMomentImage: function (momentSysId, thumbnailName, imageName) {
    var momentImageGr = new GlideRecord('x_aaro2_teamonline_moment_image');
    momentImageGr.initialize();
    momentImageGr.moment = momentSysId;
    momentImageGr.image_name = imageName;
    momentImageGr.thumbnail_name = thumbnailName
    momentImageGr.insert();
  },
  type: 'MomentsUtil'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>andrey.mironyuk</sys_created_by>
        <sys_created_on>2020-09-01 12:37:42</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>a213faa8dbcf5050389b84d8689619dd</sys_id>
        <sys_mod_count>45</sys_mod_count>
        <sys_name>MomentsUtil</sys_name>
        <sys_package display_value="TEAMonline" source="x_aaro2_teamonline">a2dfc25fdb7244105f65ba03e29619fa</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="TEAMonline">a2dfc25fdb7244105f65ba03e29619fa</sys_scope>
        <sys_update_name>sys_script_include_a213faa8dbcf5050389b84d8689619dd</sys_update_name>
        <sys_updated_by>andrey.mironyuk</sys_updated_by>
        <sys_updated_on>2020-09-28 12:52:34</sys_updated_on>
    </sys_script_include>
</record_update>
