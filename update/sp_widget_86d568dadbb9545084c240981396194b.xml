<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function ($scope, $rootScope, spUtil) {
	/* widget controller */
	var c = this;
	var maxFiles = 5
	$scope.dropzone = {}
	$scope.formCollapsed = true;
	$scope.data.base64 = ''
	$scope.limit = 10;
	$scope.loadMore = function (last, inview) {
		if (last && inview)
			$scope.limit += 3;
	}
	var dropzone = new Dropzone("#moments-dropzone", {
		url: "/file/post",
		acceptedFiles: 'image/*',
		maxFiles: maxFiles,
		addRemoveLinks: true,
		maxFilesize: 4
	})
	$scope.uploading = false
	$scope.data.caption = '';
	spUtil.recordWatch($scope, $scope.data.momentsTable, "", function (name) {
		if (~name.data.changes.indexOf('approval')) {
			//console.log('$scope.data.action', $scope.data.action)
			$scope.data.action = ''
			spUtil.update($scope);
		}
	})


	$scope.submit = function () {
		if (dropzone.files.length > maxFiles) {
			spUtil.addInfoMessage('You tried to submit ' + dropzone.files.length + ' files. Only first ' + maxFiles + ' will be uploaded')
		}
		//console.log(' dropzone.files',  dropzone.files)
		$scope.uploading = true
		$scope.data.files = [];
		for (var i = 0; i < maxFiles && i < dropzone.files.length; i++) {
			$scope.data.files.push({
				name: dropzone.files[i].name,
				type: dropzone.files[i].type,
				dataURL: dropzone.files[i].dataURL.split(',')[1]
			})
		}
		$scope.data.action = 'insert'
		dropzone.disable()
		spUtil.update($scope).then(function () {
			dropzone.removeAllFiles();
			$scope.data.caption = '';
			$scope.uploading = false;
			$scope.data.store = { displayValue: '', value: '', name: '' };
			dropzone.enable()
			spUtil.addInfoMessage('Your moment was successfully submitted for approval')
		})
	}

	$scope.approve = function (moment) {
		moment.approving = true;
		$scope.data.approvalMoment = moment
		approveAction(moment.data.sys_id, 'approved')
	}
	$scope.reject = function (moment) {
		moment.approving = true;
		approveAction(moment.data.sys_id, 'rejected')
	}
	$scope.archive = function (moment) {
		moment.approving = true;
		approveAction(moment.data.sys_id, 'rejected', true)
	}
	$scope.approvedFilter = function (item) {
		return item.data.approval == 'approved';
	};
	$scope.notApprovedFilter = function (item) {
		return item.data.approval == 'requested';
	};
	$scope.getNotApprovedCount = function () {
		return $scope.data.moments.filter((x) => { return x.data.approval == 'requested' }).length
	}
	function approveAction(sys_id, state, isArchive) {
		$scope.data.approval = sys_id
		$scope.data.action = 'approval'
		$scope.data.approveState = state;
		spUtil.update($scope).then(() => {
			spUtil.addInfoMessage('Moment successfully ' + (isArchive ? 'archived' : state))
		})
	}


	var gallery = document.getElementsByClassName('moment-gallery')[0];
	$scope.openImage = function (momentIndex, imageIndex) {
		console.log(momentIndex,imageIndex)
		$scope.selectedMomentIndex = momentIndex;
		$scope.selectedMoment = $scope.data.moments[momentIndex]
		$scope.selectedImageIndex = imageIndex;
		gallery.classList.add('active')
	}
	$(document).keydown(function(e) {
		// ESCAPE key pressed
		if (e.keyCode == 27) {
			$scope.closeGallery()
		}
	});
	$scope.closeGallery = function () {
		$scope.selectedMoment = {}
		gallery.classList.remove('active');
		
	}
	$scope.selectImage = function (index) {
		$scope.selectedImageIndex = index
	}
	$scope.iterateImage = function(amount){
		var length = $scope.data.moments[$scope.selectedMomentIndex].attachments.length
		if($scope.selectedImageIndex + amount > length - 1 ) $scope.selectedImageIndex = 0;
		else if($scope.selectedImageIndex + amount < 0) $scope.selectedImageIndex = length - 1;
		else $scope.selectedImageIndex += amount;
	}
	$scope.iterateMoment = function(amount){
		var length = $scope.data.moments.length
		if($scope.selectedMomentIndex + amount > length - 1 ) $scope.selectedMomentIndex = 0;
		else if($scope.selectedMomentIndex + amount < 0) $scope.selectedMomentIndex = length - 1;
		else $scope.selectedMomentIndex += amount;
		$scope.selectedMoment = $scope.data.moments[$scope.selectedMomentIndex]
		$scope.selectedImageIndex = 0;
	}
	
	/* context Menu */
	$scope.contextMenu = function (moment) {
		if (!$scope.data.canEdit) { return [] }
		return [
			['Archive', function ($itemScope) {
				var currentScope = getCurrentScopeByMethod($itemScope,'archive');
				currentScope.archive(moment);	
			}]
		]
	}
	
	/* returs current scope */
	function getCurrentScopeByMethod(scope,method){
		var currentScope = scope; 
		var i = 0;
		while (!currentScope.hasOwnProperty(method) && i<10){
			currentScope = currentScope.$parent;
			i++;
		}
		return currentScope;
	}
	
}
]]></client_script>
        <controller_as>c</controller_as>
        <css>$blue: #0069c8;&#13;
#moments-container {&#13;
  margin-bottom: 10px;&#13;
}&#13;
#moments-dropzone {&#13;
  height: 100%;&#13;
  margin-bottom: 5px;&#13;
}&#13;
.moment-form-container {&#13;
  background-color: white;&#13;
  padding: 10px;&#13;
}&#13;
.moments-header {&#13;
  background-color: white;&#13;
  margin-bottom: 5px;&#13;
  text-align: center;&#13;
  font-size: 24px;&#13;
  padding: 2rem 0;&#13;
  line-height: 1;&#13;
  text-transform: uppercase;&#13;
  letter-spacing: 1.5px;&#13;
}&#13;
/*.moments-header:after {&#13;
  content: "";&#13;
  position: absolute;&#13;
  bottom: 14px;&#13;
  left: 42%;&#13;
  height: 2px;&#13;
  width: 86px;&#13;
  background: #91c712;&#13;
}*/&#13;
.dropzone {&#13;
  border: 2px dashed $blue;&#13;
  &amp;.dz-drag-hover {&#13;
    border: 2px solid $blue;&#13;
  }&#13;
}&#13;
.submit-memory-btn {&#13;
  width: 100%;&#13;
}&#13;
.to-approve-container {&#13;
  margin-top: 10px;&#13;
}&#13;
.to-approve-moments,&#13;
.approved-container {&#13;
  max-height: 600px;&#13;
  overflow-y: auto;&#13;
  overflow-x: hidden;&#13;
  margin-top: 5px;&#13;
  &amp;::-webkit-scrollbar {&#13;
    width: 0.5em;&#13;
  }&#13;
&#13;
  &amp;::-webkit-scrollbar-thumb {&#13;
    background-color: darkgrey;&#13;
    outline: 1px solid slategrey;&#13;
  }&#13;
}&#13;
.moment {&#13;
  background-color: white;&#13;
  margin-bottom: 5px;&#13;
  padding: 20px;&#13;
  opacity: 0.8;&#13;
  transition: all 0.3s ease-in-out;&#13;
  &amp;:hover {&#13;
    opacity: 1;&#13;
  }&#13;
  .info-wrapper {&#13;
    display: flex;&#13;
    justify-content: end;&#13;
  }&#13;
  .author {&#13;
    font-size: 11pt;&#13;
    font-weight: 900;&#13;
    display: flex;&#13;
    margin-bottom: 5px;&#13;
    justify-content: space-between;&#13;
  }&#13;
  .caption {&#13;
    padding: 10px;&#13;
    background-color: #eceff1;&#13;
    font-weight: bold;&#13;
    font-size: 12pt;&#13;
  }&#13;
  .created-on {&#13;
    font-size: 10pt;&#13;
  }&#13;
  .block {&#13;
    display: block;&#13;
  }&#13;
  .avatar-timeago-container {&#13;
    display: flex;&#13;
    justify-content: center;&#13;
    flex-direction: column;&#13;
    align-items: center;&#13;
  }&#13;
  .moment-images {&#13;
    display: flex;&#13;
    overflow-x: auto;&#13;
    justify-content: start;&#13;
    margin: 10px 0;&#13;
    &amp;::-webkit-scrollbar {&#13;
      height: 0.5em;&#13;
    }&#13;
  &#13;
    &amp;::-webkit-scrollbar-thumb {&#13;
      background-color: darkgrey;&#13;
      outline: 1px solid slategrey;&#13;
    }&#13;
  }&#13;
  .moment-image {&#13;
    display: flex;&#13;
    margin-right: 10px;&#13;
    img {&#13;
      max-height: 100px;&#13;
      object-fit: contain;&#13;
    }&#13;
  }&#13;
}&#13;
.moment-gallery {&#13;
  z-index: 1000;&#13;
  position: fixed;&#13;
  top: 0;&#13;
  left: 0;&#13;
  width: 100vw;&#13;
  height: 100vh;&#13;
  visibility: hidden;&#13;
  opacity: 0;&#13;
  transition: 300ms ease-in-out;&#13;
  background-color: rgba(0, 0, 0, 0.6);&#13;
  cursor: initial;&#13;
  &amp;.active {&#13;
    visibility: visible;&#13;
    opacity: 1;&#13;
    transition: 300ms ease-in-out;&#13;
  }&#13;
  .image-preview {&#13;
    position: relative;&#13;
    height: 80%;&#13;
    display: flex;&#13;
    transition: 300ms ease-in-out;&#13;
    place-items: center;&#13;
    justify-content: center;&#13;
&#13;
    .image-container {&#13;
      position: relative;&#13;
      display: flex;&#13;
      place-content: center;&#13;
      img {&#13;
        max-width: 70vw;&#13;
        max-height: 70vh;&#13;
        display: none;&#13;
        &amp;.active {&#13;
          display: block;&#13;
        }&#13;
      }&#13;
    }&#13;
  }&#13;
  .caption-container{&#13;
    padding: 10px;&#13;
    text-align: center;&#13;
    color: white;&#13;
    font-size: 14pt;&#13;
    font-weight: 900;&#13;
  }&#13;
  .controls-container{&#13;
    position: absolute;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    display: flex;&#13;
    place-content: center;&#13;
    justify-content: space-between;&#13;
  }&#13;
  .mini-gallery {&#13;
    display: flex;&#13;
    place-content: center;&#13;
    &#13;
    .mini-gallery-image {&#13;
      &amp;.ng-leave{&#13;
        display: none&#13;
    }&#13;
      margin: 5px 5px;&#13;
      display: flex;&#13;
      transition: 300ms ease-in-out;&#13;
      filter: brightness(0.5);&#13;
      &amp;.active {&#13;
        transition: 300ms ease-in-out;&#13;
        filter: brightness(1);&#13;
      }&#13;
    }&#13;
    img {&#13;
      max-height: 100px;&#13;
      object-fit: contain;&#13;
    }&#13;
  }&#13;
}&#13;
.image-control {&#13;
  display: flex;&#13;
  width: 7%;&#13;
  height: 100%;&#13;
  place-items: center;&#13;
  color: rgb(255, 255, 255);&#13;
  justify-content: center;&#13;
  cursor: pointer;&#13;
  font-size: 16pt;&#13;
  opacity: 0;&#13;
  &amp;.left{&#13;
    transform: translateX(-15px);&#13;
  }&#13;
  &amp;.right{&#13;
    transform: translateX(15px);&#13;
  }&#13;
  transition: 100ms ease-in-out;&#13;
  &amp;:hover {&#13;
    opacity: 1;&#13;
    transform: translateX(0);&#13;
    transition: 100ms ease-in-out;&#13;
  }&#13;
}&#13;
.moment-control {&#13;
  display: flex;&#13;
  width: 5%;&#13;
  height: 100%;&#13;
  place-items: center;&#13;
  color: rgb(185, 185, 185);&#13;
  justify-content: center;&#13;
  cursor: pointer;&#13;
  font-size: 16pt;&#13;
  transition: 100ms ease-in-out;&#13;
  &amp;:hover {&#13;
    color: white;&#13;
    transition: 100ms ease-in-out;&#13;
  }&#13;
}&#13;
&#13;
.lds-ripple {&#13;
  display: inline-block;&#13;
  position: relative;&#13;
  width: 80px;&#13;
  height: 80px;&#13;
}&#13;
.lds-ripple div {&#13;
  position: absolute;&#13;
  border: 4px solid rgb(0, 0, 0);&#13;
  opacity: 1;&#13;
  border-radius: 50%;&#13;
  animation: lds-ripple 1s cubic-bezier(0, 0.2, 0.8, 1) infinite;&#13;
}&#13;
.lds-ripple div:nth-child(2) {&#13;
  animation-delay: -0.5s;&#13;
}&#13;
@keyframes lds-ripple {&#13;
  0% {&#13;
    top: 36px;&#13;
    left: 36px;&#13;
    width: 0;&#13;
    height: 0;&#13;
    opacity: 1;&#13;
  }&#13;
  100% {&#13;
    top: 0px;&#13;
    left: 0px;&#13;
    width: 72px;&#13;
    height: 72px;&#13;
    opacity: 0;&#13;
  }&#13;
}&#13;
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>teamonline_memories</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Teamonline Memories</name>
        <option_schema/>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function () {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */
	data.isLoggedIn = gs.getSession().isLoggedIn();
  data.canEdit = gs.getUser().isMemberOf(gs.getProperty("x_aaro2_teamonline.teamonline_administration_group")) || gs.hasRole("admin");
  data.momentsTable = "x_aaro2_teamonline_moment";
  data.store = getStore(gs.getUser().getCompanyID())
  data.storesQuery = 'u_is_store=true'
  if (input && input.action === 'insert') {
    var newMomentGr = new GlideRecord(data.momentsTable);
    newMomentGr.initialize();
    newMomentGr.caption = input.caption;
    newMomentGr.store = input.store.value;
    data.memorySysId = newMomentGr.insert();
    input.files.forEach(function (file) {
      var gsa = new GlideSysAttachment();
      gsa.writeBase64(newMomentGr, file.name, file.type, file.dataURL);
    })
    getMoments();
  }
  if (input && input.action === 'approval') {
    approveAction(input.approval, input.approveState)
    getMoments();
  }
  if (input && input.action === 'loadMore') {
    var datetime = input.last.sys_created_on.split(' ')
    var query = "sys_created_on>javascript:gs.dateGenerate(" + datetime[0] + ", " + datetime[1] + ")";
  }

  if (!input || !input.action)
    getMoments()

  data.action = ''

  function getMoments(additionalQuery) {
    var momentGr = new GlideRecord(data.momentsTable);
    momentGr.addEncodedQuery('approval!=rejected')
    momentGr.addEncodedQuery(additionalQuery)
    momentGr.orderByDesc('sys_created_on');
    momentGr.setLimit(20);
    momentGr.query();
    moments = []
    while (momentGr.next()) {
      var moment = {};
      moment.attachments = getAttachments(momentGr.getUniqueValue())
      moment.data = {
        sys_id: momentGr.getUniqueValue(),
        caption: momentGr.getValue('caption'),
        approval: momentGr.getValue('approval'),
        store: momentGr.getDisplayValue('store'),
        opened_by: {
          id: momentGr.getValue('opened_by'),
          name: momentGr.getDisplayValue('opened_by')
        },
        created_on: momentGr.getValue('sys_created_on')
      };
      moments.push(moment)
    }
    data.moments = moments;
  }
  function getAttachments(record_sys_id) {

    var ga = new GlideSysAttachment();
    var attGr = new GlideRecord('sys_attachment');
    attGr.addQuery('table_name', data.momentsTable);
    attGr.addQuery('table_sys_id', record_sys_id);
    attGr.query();
    var attachments = []
    while (attGr.next()) {
      attachments.push({
        name: attGr.getValue('file_name'),
        content_type: attGr.getValue('content_type'),
        dataURL: "/sys_attachment.do?view=true&sys_id=" + attGr.getUniqueValue()

      });
    }
    return attachments
  }
  function approveAction(record_sys_id, approveState) {
    var apprGr = new GlideRecord('sysapproval_approver');
    apprGr.addQuery('sysapproval', record_sys_id);
    apprGr.addQuery('state', 'requested');
    apprGr.query();
    if (apprGr.next()) {
      apprGr.state = approveState;
      apprGr.update();
    }
    var momGr = new GlideRecord(data.momentsTable);
    momGr.get(record_sys_id);
    momGr.caption = input.approvalMoment?input.approvalMoment.data.caption:momGr.caption
    momGr.approval = approveState;
    momGr.update()
  }
  function getStore(sys_id) {
    var storeGr = new GlideRecord('core_company');
    storeGr.get(sys_id);
    return { name: '', displayValue: storeGr.getValue('name'), value: sys_id }
  }
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>andrey.mironyuk</sys_created_by>
        <sys_created_on>2020-07-06 09:31:10</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>86d568dadbb9545084c240981396194b</sys_id>
        <sys_mod_count>458</sys_mod_count>
        <sys_name>Teamonline Memories</sys_name>
        <sys_package display_value="TEAMonline" source="x_aaro2_teamonline">a2dfc25fdb7244105f65ba03e29619fa</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="TEAMonline">a2dfc25fdb7244105f65ba03e29619fa</sys_scope>
        <sys_update_name>sp_widget_86d568dadbb9545084c240981396194b</sys_update_name>
        <sys_updated_by>andrey.mironyuk</sys_updated_by>
        <sys_updated_on>2020-08-27 15:56:13</sys_updated_on>
        <template><![CDATA[<div id="moments-container">
  <div class="moments-header">
    <span> TEAMONLINE Moments</span>
  </div>
  <div class="submit-area">
    <button type="button" class="btn btn-primary submit-memory-btn"
            ng-click="formCollapsed = !formCollapsed">{{formCollapsed?'Add moment':'Collapse form'}}</button>
  </div>
  <div uib-collapse="formCollapsed">
    <div class="moment-form-container">
      <form action="file" enctype="multipart/form-data" class="dropzone needsclick" id="moments-dropzone">
      </form>

      <div class="form-group">
        <label for="memoryCaption">Leave pitch caption here</label>
        <textarea class="form-control" id="memoryCaption" rows="2" ng-model="data.caption"
                  ng-disabled="uploading"></textarea>
        <label for="storeNumber">Select your location</label>
        <sn-record-picker id="storeNumber" field="data.store" table="'core_company'" display-field="'name'"
                          value-field="'sys_id'" search-fields="'name'" page-size="100" value="data.userCompany"
                          default-query="data.storesQuery"></sn-record-picker>
      </div>

      <div class="submit-area">
        <input type="button" value="Submit" class="btn btn-primary submit-memory-btn"
               ng-disabled="dropzone.files.length==0||!data.caption||!data.store.value||uploading" ng-click="submit()">
      </div>
    </div>
  </div>
  <div class="approved-container" in-view-container>
    <div class="approved-moments" ng-repeat="moment in data.moments | filter:approvedFilter | limitTo: limit"
         in-view="loadMore($last, $inview)">
      <div context-menu="contextMenu(moment)" class="moment row">
        <div class="col-md-2 col-xs-12">
          <div class="avatar-timeago-container">
            <!--GUEST PLACEHOLDER-->
            <div ng-if="!data.isLoggedIn" class="avatar-large avatar-container">
                <div class="avatar soloAvatar">
                  <div class="sub-avatar" style="background-image: url(c4436fe21b3250d0d6c54229bc4bcbac.iix)" />
                </div>
            </div>
            <sn-avatar ng-if="data.isLoggedIn" class="avatar-large" primary="moment.data.opened_by.id" />
            <sn-time-ago timestamp="moment.data.created_on" class="block" />
          </div>
        </div>
        <div class="col-md-10 col-xs-12">
          <div class="author">{{moment.data.opened_by.name}} from store {{moment.data.store}}:
            <!----<input ng-if="data.canEdit" type="button" value="Archive" class="btn btn-danger btn-xs"
ng-click="archive(moment)">--->
          </div>
          <div class="caption"><i>"{{moment.data.caption}}"</i></div>
          <div class="moment-images">
            <div ng-if="moment.attachments.length > 0" class="moment-image" ng-repeat="image in moment.attachments"
                 ng-click="openImage($parent.$parent.$index, $index)">
              <img ng-src="{{image.dataURL}}" alt="" srcset="">
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="to-approve-container" ng-if="data.canEdit && getNotApprovedCount()>0">
    <div class="moments-header">
      <span> waiting for approval ({{getNotApprovedCount()}})</span>
    </div>
    <div class="to-approve-moments">
      <div class="to-approve-moment" ng-repeat="moment in data.moments | filter:notApprovedFilter">
        <div class="moment row">
          <div class="col-md-2 col-xs-12">
            <div class="avatar-timeago-container">
              <sn-avatar class="avatar-large" primary="moment.data.opened_by.id" />
              <sn-time-ago timestamp="moment.data.created_on" class="block" />
            </div>
          </div>
          <div class="col-md-10 col-xs-12">
            <div class="author">{{moment.data.opened_by.name}} from store {{moment.data.store}}:</div>
            <textarea class="form-control" id="apprmemoryCaption" rows="2" ng-model="moment.data.caption"
                      ng-disabled="uploading"></textarea>
            <div class="moment-images">
              <div ng-if="moment.attachments.length > 0" class="moment-image" ng-repeat="image in moment.attachments"
                   ng-click="openImage($parent.$parent.$index, $index)">
                <img ng-src="{{image.dataURL}}" alt="" srcset="">
              </div>

            </div>

            <input type="button" value="Approve" class="btn btn-success" ng-click="approve(moment)"
                   ng-disabled="moment.approving">
            <input type="button" value="Reject" class="btn btn-danger" ng-click="reject(moment)"
                   ng-disabled="moment.approving">
          </div>
        </div>
      </div>
    </div>
  </div>

</div>
<div class="moment-gallery" ng-click="closeGallery()">
  <div class="image-preview">
    <div class="controls-container">
      <div class="moment-control" ng-click="iterateMoment(-1); $event.stopPropagation();"><i class="fa fa-chevron-left"></i></div>
      <div class="moment-control" ng-click="iterateMoment(1); $event.stopPropagation();"><i class="fa fa-chevron-right"></i></div>
    </div>
    <div class="image-container">
      <div class="controls-container" ng-if="selectedMoment.attachments.length>1">
        <div class="image-control left" ng-click="iterateImage(-1); $event.stopPropagation();"><i class="fa fa-chevron-circle-left"></i></div>
        <div class="image-control right" ng-click="iterateImage(1); $event.stopPropagation();"><i class="fa fa-chevron-circle-right"></i></div>
      </div>
      <img ng-src="{{image.dataURL}}" alt="" srcset="" ng-repeat="image in selectedMoment.attachments"
      ng-class="{'active': $index==selectedImageIndex}">
    </div>
    
  </div>
  <div class="caption-container">
    <div class="author">{{selectedMoment.data.opened_by.name}} from store {{selectedMoment.data.store}}:
    </div>
    <div class="caption"><i>"{{selectedMoment.data.caption}}"</i></div>
  </div>
  <div class="mini-gallery" ng-if="selectedMoment.attachments.length>1">
    <div class="mini-gallery-image" 
      ng-repeat="image in selectedMoment.attachments" 
      ng-click="selectImage($index); $event.stopPropagation();" 
      ng-class="{'active': $index==selectedImageIndex}">
      <img ng-src="{{image.dataURL}}" alt="" srcset="" >
    </div>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
