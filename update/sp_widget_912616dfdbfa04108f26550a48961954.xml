<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function ($scope, spUtil, $rootScope, $timeout, spAriaUtil, spGtd, $window, spModal, $uibModal) {

	$scope.collapse = function () {
		$rootScope.$emit('sp-navbar-collapse');
	}
	$scope.loadingIndicator = $rootScope.loadingIndicator;
	$scope.cartItemCount = 0;
	$scope.wishlistItemCount = 0;
	$scope.itemAddedTooltipOpen = false;
	$scope.accessibilityEnabled = spAriaUtil.g_accessibility === "true";
	$scope.data.linkEditAllowed = false;
	$scope.isNavCollapsed = true;

	$scope.$on("$sp.service_catalog.cart.count", function ($evt, count) {
		$scope.cartItemCount = count;
	});
	$scope.$on("$sp.service_catalog.wishlist.count", function ($evt, count) {
		$scope.wishlistItemCount = count;
	});
	var cancelTooltipPromise;
	$scope.$on('sp_loading_indicator', function (e, value) {
		$scope.loadingIndicator = value;
	});
	// PRB1108244: visibleItems array is used to improve keyboard nav
	// in menu, refresh it as needed

	$scope.avatarProfile = {
		userID: $scope.user.sys_id,
		name: $scope.user.name,
		initials: $window.NOW.user_initials
	};

	$scope.createArticle = function () {
		spModal.open({
			title: '',
			widget: 'team_online_article_editor',
			widgetInput: {},
			size: 'md',
			buttons: []
		});
	}

	$scope.allowEdit = function () {
		$scope.data.linkEditAllowed = !$scope.data.linkEditAllowed;
	}

	if ($window.NOW.user_avatar) {
		$scope.avatarProfile.userImage = $window.NOW.user_avatar;
	}

	$scope.openPopUp = function () {
		var url = "$chat_support.do?queueID=" + $scope.data.connect_support_queue_id;
		var popup = window.open(url, "popup", "width=900, height=600");
	};

	$scope.openLogin = function () {
		$scope.modalInstance = $uibModal.open({
			templateUrl: 'modalLogin',
			scope: $scope
		});
	};

	var xsScreenSize = isXSScreenSize();
	$scope.showXSAvatar = isXSScreenSize();
	$scope.showAvatar = !isXSScreenSize();

	$scope.isAgentChatConfigured = g_has_agent_chat_config;

	angular.element($window).on('resize', function () {
		if (xsScreenSize !== isXSScreenSize() && (!$scope.showXSAvatar || !$scope.showAvatar)) {
			$scope.showXSAvatar = true;
			$scope.showAvatar = true;
		}
	});

	spUtil.get("team_online_article_editor").then(function (response) {
		$scope.newArticle = response;
	});

	function isXSScreenSize() {
		return $window.matchMedia('(max-width: 767px)').matches;
	}

	$rootScope.$on('sp.avatar_changed', function (evt, obj) {
		$scope.userID = "";
		$scope.newAvatarId = obj.newAvatarId;
		$timeout(function () {
			$scope.userID = $scope.user.sys_id;
			$(".sub-avatar").css("background-image", 'url("' + $scope.newAvatarId + '.iix?t=small")');
		});
	});

	$scope.$watch('data.menu.items', function () {
		$scope.visibleItems = [];
		if ($scope.data.menu.items) {
			for (var i in $scope.data.menu.items) {
				var item = $scope.data.menu.items[i];
				if (item.items || (item.scriptedItems && item.scriptedItems.count != 0))
					$scope.visibleItems.push(item);
			}
		}
	}, true);
	$scope.$on('sp-menu-update-tours', function (event, tours) {
		$scope.data.showTours = $scope.data.showTours && !spUtil.isMobile();
		if ($scope.data.showTours === false) return;
		var guidedToursLabel = 'Guided Tours';
		$scope.data.guidedTours = {
			label: guidedToursLabel,
			collection: []
		};
		if (tours.length > 0) {
			$scope.data.guidedTours.collection = tours.map(function (t) {
				return {
					title: t.name,
					id: t.id,
					clicked: function () {
						spGtd.launch(t.id);
					}
				};
			});
		}
	});
	// Get list of record watchers
	var record_watchers = [];
	if ($scope.data.menu.items) {
		for (var i in $scope.data.menu.items) {
			var item = $scope.data.menu.items[i];
			if (item.type == 'scripted') {
				if (item.scriptedItems.record_watchers)
					record_watchers = record_watchers.concat(item.scriptedItems.record_watchers);
			}
			if (item.type == 'filtered') {
				record_watchers.push({ 'table': item.table, 'filter': item.filter });
			}
		}
	}
	// Init record watchers
	for (var y in record_watchers) {
		var watcher = record_watchers[y];
		spUtil.recordWatch($scope, watcher.table, watcher.filter);
	}
	$rootScope.$broadcast('sp-header-loaded');


	var flatFields = [];
	if ($scope.data.canEdit)
		angular.forEach($scope.data.linkData.form._fields, function (field) {
			flatFields.push(field);
		});


	$scope.getGlideForm = function () {
		var uiMessageHandler = function (g_form, type, message) {
			switch (type) {
				case 'addInfoMessage':
					spUtil.addInfoMessage(message);
					break;
				case 'addErrorMessage':
					spUtil.addErrorMessage(message);
					break;
				case 'clearMessages':
					break;
				default:
			}
		};

		var g_form = glideFormFactory.create($scope, $scope.data.linkData.form.table, $scope.data.linkData.form.sys_id, flatFields, null, { uiMessageHandler: uiMessageHandler });
		return g_form;
	}


	$scope.openLinkEditor = function (item, operation, parent) {
		$scope.data.link = {};
		$scope.data.link.sys_id = item.sys_id;
		$scope.data.link.operation = operation;

		if (parent) {
			$scope.data.link.parent = {
				sys_id: parent.sys_id,
				displayValue: parent.label
			}

		}

		spUtil.update($scope).then(function () {
			$scope.showModal();
			$scope.data.link = {};
		})

	};
	$scope.showModal = function () {
		$scope.modalInstance = $uibModal.open({
			animation: true,
			templateUrl: 'teamonlineQuickLinkEditor',
			size: 'lg',
			backdrop: false,
			scope: $scope
		});
	}
	$scope.closeEditor = function () {
		$scope.data.linkData.sys_id = '';
		$scope.modalInstance.close();
	};
	$scope.openUrl = function (url) {
		window.open(url, '_blank');
	}
	$scope.saveRecord = function () {
		var x = {};
		x.method = "save";
		x.table = $scope.data.linkData.table;
		x.sys_id = $scope.data.linkData.sys_id;
		x._fields = $scope.data.linkData.form._fields;

		if (!x._fields.label.value || !x._fields.url.value) {
			spUtil.addErrorMessage("Please fill Label and Url");
			return;
		}
		if (!validateUrl(x._fields.url.value)) {
			spUtil.addErrorMessage("Please provide correct URL in format: https://sitename.domain");
			return
		}

		spUtil.get($scope, x).then(function (response) {
			if ($scope.modalInstance) {
				$scope.modalInstance.close();
			}
			spUtil.update($scope)
		});
	}

	$scope.deleteRecord = function (item, type) {
		spModal.open({
			title: 'Delete this ' + type + '?',
			message: type + ' will be deleted from system permanently',
			buttons: [
				{ label: '${No}', cancel: true },
				{ label: '${Yes}', primary: true }
			]
		}).then(function () {
			$scope.data.linkData.operation = 'delete';
			$scope.data.linkData.sys_id = item.sys_id;
			spUtil.update($scope).then(function () {
				spUtil.addInfoMessage(type + ' was deleted');
				spUtil.update($scope)
			});
		});
	}
	function validateUrl(url) {
		var regex = new RegExp(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)/);
		return regex.test(url)
	}
	/*var spWindow = getSpWindow();
	var header = getHeader();
	var head = getHead()
	var sticky = header.offsetTop;
	spWindow.addEventListener('scroll', function (e) {
		onScroll();
	});



	// Add the sticky class to the header when you reach its scroll position. Remove "sticky" when you leave the scroll position
	function onScroll() {

		if (spWindow.scrollTop > sticky) {
			header.classList.add("header-fixed");
			head.classList.add("margin-bottom")
		} else {
			header.classList.remove("header-fixed");
			head.classList.remove("margin-bottom")
		}
	}
	function getHeader() {
		return document.getElementsByClassName("menu-container")[0];
	}
	function getSpWindow() {
		return document.getElementsByClassName('sp-scroll')[0];
	}
	function getHead() {
		return document.getElementsByClassName('navbar-inverse')[0];
	}*/
}]]></client_script>
        <controller_as>c</controller_as>
        <css>$blue: #0069c8;&#13;
$lightblue: #0071ce;&#13;
.header-loader {&#13;
  float: left;&#13;
  width: 24px;&#13;
  position: relative;&#13;
  top: 24px;&#13;
}&#13;
.color-white {&#13;
  color: white;&#13;
}&#13;
.color-white:hover {&#13;
  color: rgba(255, 255, 255, 0.6);&#13;
}&#13;
.semi-transparent {&#13;
  color: white;&#13;
  transition: all .1s ease-in-out;&#13;
}&#13;
a.semi-transparent:hover {&#13;
  font-size: 1.7rem&#13;
}&#13;
.avatar {&#13;
  float: right;&#13;
}&#13;
.megamenu {&#13;
  position: static;&#13;
}&#13;
.header__nav {&#13;
  position: relative;&#13;
}&#13;
.header__nav li.has-children {&#13;
  padding-right: 3.3rem;&#13;
}&#13;
.profile-dropdown {&#13;
  background-color: $lightblue;&#13;
  top: 39px;&#13;
  z-index: 500;&#13;
  li {&#13;
    display: block;&#13;
    a {&#13;
      line-height: inherit;&#13;
    }&#13;
  }&#13;
}&#13;
&#13;
.header__nav li:hover &gt; a,&#13;
.header__nav li:focus &gt; a {&#13;
  color: #ffffff;&#13;
}&#13;
&#13;
.header__nav li:hover li,&#13;
.header__nav li:focus li {&#13;
  background: transparent;&#13;
}&#13;
&#13;
.profile-menu-item {&#13;
  position: relative;&#13;
}&#13;
.header__nav &gt; li &gt; a {&#13;
  line-height: 39px;&#13;
}&#13;
.header-menu-item {&#13;
  font-size: 1.2em;&#13;
  &amp;.dropdown {&#13;
    position: static;&#13;
  }&#13;
}&#13;
.megamenu {&#13;
  position: static;&#13;
}&#13;
.megamenu-bg {&#13;
  background-color: $lightblue;&#13;
  border-radius: 0px;&#13;
  max-height: calc(100vh - 132px);&#13;
  overflow: auto;&#13;
  &amp;::-webkit-scrollbar-track {&#13;
    -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);&#13;
    border-radius: 10px;&#13;
    background-color: $lightblue;&#13;
  }&#13;
  &amp;::-webkit-scrollbar {&#13;
    width: 12px;&#13;
    background-color: $lightblue;&#13;
  }&#13;
  &amp;::-webkit-scrollbar-thumb {&#13;
    border-radius: 10px;&#13;
    background-color: rgba(255, 255, 255, 0.884);&#13;
  }&#13;
}&#13;
.megamenu-container {&#13;
  position: absolute;&#13;
  top: auto;&#13;
  left: 0;&#13;
  padding-top: 10px;&#13;
  min-width: 100%;&#13;
  border: none;&#13;
  z-index: 500;&#13;
  color: white;&#13;
  visibility: hidden;&#13;
  opacity: 0;&#13;
  transform: translate3d(0, -15px, 0);&#13;
  transition: visibility 0s 200ms, opacity 200ms ease-in-out, transform 200ms ease-in-out;&#13;
&#13;
  ul li {&#13;
    position: relative;&#13;
  }&#13;
}&#13;
.megamenu-list,&#13;
.megamenu-list-item {&#13;
  position: relative;&#13;
}&#13;
&#13;
.megamenu-subcategory {&#13;
  text-decoration: none;&#13;
}&#13;
.subheading-list-item {&#13;
  margin-left: 5px;&#13;
}&#13;
.megamenu-subcategory:hover {&#13;
  color: white;&#13;
}&#13;
.three-column-layout {&#13;
  -webkit-column-width: 30%;&#13;
  -moz-column-width: 30%;&#13;
  column-width: 30%;&#13;
  -webkit-column-count: 3;&#13;
  -moz-column-count: 3;&#13;
  column-count: 3;&#13;
  -webkit-column-gap: 30px;&#13;
  -moz-column-gap: 30px;&#13;
  column-gap: 30px;&#13;
  text-align: left;&#13;
}&#13;
.column-fill-auto {&#13;
  column-fill: auto;&#13;
}&#13;
.column-fill-balance {&#13;
  column-fill: balance;&#13;
}&#13;
.i-b {&#13;
  display: inline-block;&#13;
}&#13;
.btn-add-subcategory {&#13;
  border: none;&#13;
  background: none;&#13;
  color: white;&#13;
}&#13;
.btn-add-subcategory:hover {&#13;
  border: none;&#13;
  background: none;&#13;
  color: gray;&#13;
}&#13;
.megamenu__category {&#13;
  display: inline;&#13;
}&#13;
&#13;
.dropdown .dropdown-menu {&#13;
  opacity: 0;&#13;
  display: none;&#13;
}&#13;
.dropdown-menu {&#13;
  a:hover {&#13;
    background-color: $blue;&#13;
  }&#13;
}&#13;
.dropdown.open .dropdown-menu {&#13;
  display: block;&#13;
  -webkit-transform: translate3d(0, 15px, 0);&#13;
  -ms-transform: translate3d(0, 15px, 0);&#13;
  transform: translate3d(0, 15px, 0);&#13;
  -webkit-transition: all 0.5s ease-in-out;&#13;
  transition: all 0.5s ease-in-out;&#13;
&#13;
  opacity: 1;&#13;
}&#13;
&#13;
.megamenu {&#13;
  &amp;:hover &gt; .megamenu-container {&#13;
    visibility: visible;&#13;
    opacity: 1;&#13;
    transform: translate3d(0, 0px, 0);&#13;
    transition: 300ms ease-in-out;&#13;
  }&#13;
}&#13;
.btn-lock {&#13;
  &amp;:hover {&#13;
    color: white;&#13;
  }&#13;
}&#13;
@media (min-width: 768px){&#13;
  .header__nav {&#13;
    position: static;&#13;
  }&#13;
}</css>
        <data_table>sp_instance_menu</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list>title</field_list>
        <has_preview>false</has_preview>
        <id>team_online_header_menu</id>
        <internal>false</internal>
        <link/>
        <name>Team Online Header Menu</name>
        <option_schema/>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function () {

	// build menus
	var userIP = gs.getSession().getClientIP();
	data.userIPisValid = new TeamOnlineUtils().validateIP(userIP);
	
	data.canEdit = gs.getUser().isMemberOf(gs.getProperty("x_aaro2_teamonline.teamonline_administration_group")) || gs.hasRole("admin");
	data.isLoggedIn = true;//gs.getSession().isLoggedIn();

	data.login_page = $sp.getValue('login_page');
	data.profileBtnMsg = gs.getMessage("User options");

	data.menuid = $sp.getValue('sys_id');
	var menu_id = $sp.getValue('sys_id'); // instance sys_id
	var gr = new GlideRecord('sp_instance_menu');
	gr.get(menu_id);

	data.menu = {};
	data.menu.items = $sp.getMenuItems(menu_id);

	// Show tours only if gtd's sp sys property is set
	data.showTours = (gs.getProperty('com.snc.guided_tours.sp.enable') === 'true') && data.isLoggedIn;
	var catalogArr = ($sp.getCatalogs().value + "").split(",");
	data.loginWidget = $sp.getWidgetFromInstance('login-modal');
	catalogArr.forEach(function (catalog) {
		data.showWishlist = data.showWishlist || new sn_sc.Catalog(catalog).isWishlistEnabled();
	});
	if (data.canEdit) {
		var linkFields = {
			label: {
				readonly: false,
				value: '',
				displayValue: '',
				mandatory: true
			},
			url: {
				readonly: false,
				value: '',
				displayValue: '',
				mandatory: true
			},
			glyph: {
				readonly: false,
				value: '',
				displayValue: '',
				mandatory: false
			},
			order: {
				readonly: false,
				value: '',
				displayValue: '',
				mandatory: false
			},
			type: {
				readonly: true,
				value: 'url',
				displayValue: 'Url',
				mandatory: false
			},
			sp_rectangle_menu_item: {
				readonly: false,
				value: '',
				displayValue: '',
				mandatory: true
			},
			url_target: {
				readonly: false,
				value: '_blank',
				displayValue: '_blank',
				mandatory: false
			}
		}
		data.linkData = {};
		data.linkData.table = 'sp_rectangle_menu_item';
		data.linkData.sys_id = '-1';
		data.linkData.view = 'teamonlineportaledit';
		data.linkData.operation = 'Create';
		data.linkData.query = '';
		data.linkData.wasInput = !!input;
		if (input && input.link) {
			data.linkData.sys_id = input.link.sys_id ? input.link.sys_id : '-1';
			data.linkData.operation = input.link.operation || 'Create';
			data.linkData.parent = input.link.parent;
		}
		if (input && input._fields) {
			saveFormData(input.table, input.sys_id, input._fields, linkFields);
		}
		if (input && input.linkData && input.linkData.operation == 'delete') {
			data.deleteInfo = 'input.linkData.sys_id';
			var menuItemGr = new GlideRecord(data.linkData.table);
			menuItemGr.get(input.linkData.sys_id);
			menuItemGr.deleteRecord();
		}
		data.linkData.form = $sp.getForm(data.linkData.table, data.linkData.sys_id, data.linkData.query, data.linkData.view);
		var fields = data.linkData.form._fields;

		if (data.linkData.parent) {
			linkFields.sp_rectangle_menu_item.value = data.linkData.parent.sys_id;
			linkFields.sp_rectangle_menu_item.displayValue = data.linkData.parent.displayValue;
			linkFields.sp_rectangle_menu_item.readonly = true;
		}

		data.linkData.form._fields = prepareFormFields(fields, linkFields);
	}

})();

function saveFormData(table, sys_id, fields, fieldsToSave) {
	var recordGr = new GlideRecord(table);
	var isInsert = !recordGr.get(sys_id);
	if (isInsert) recordGr.initialize();
	for (var key in fieldsToSave) {
		recordGr[key] = fields[key].value;
	}
	if (isInsert) recordGr.insert();
	else recordGr.update();
}

function prepareFormFields(fields, props) {

	if (fields.sp_rectangle_menu_item.displayValue === 'Quick Links')
		props.sp_rectangle_menu_item.readonly = true;

	for (var key in props) {
		for (var prop in props[key]) {
			fields[key][prop] = props[key][prop] !== '' ? props[key][prop] : fields[key][prop];
		}
		fields[key].sys_readonly = false;

	}

	return fields;
}]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>xxabunko</sys_created_by>
        <sys_created_on>2020-02-11 17:07:22</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>912616dfdbfa04108f26550a48961954</sys_id>
        <sys_mod_count>389</sys_mod_count>
        <sys_name>Team Online Header Menu</sys_name>
        <sys_package display_value="TEAMonline" source="x_aaro2_teamonline">a2dfc25fdb7244105f65ba03e29619fa</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="TEAMonline">a2dfc25fdb7244105f65ba03e29619fa</sys_scope>
        <sys_update_name>sp_widget_912616dfdbfa04108f26550a48961954</sys_update_name>
        <sys_updated_by>xxamirony</sys_updated_by>
        <sys_updated_on>2020-10-05 14:20:24</sys_updated_on>
        <template><![CDATA[<div class="menu-container">

  <!-- <nav class="header__nav-wrap" style="margin-top: 0; ">
    <ul class="header__nav" aria-label="${Header menu}" role="menubar">
      <div class="header-loader" ng-class="{'invisible': !loadingIndicator}">
        <div class="hidden-xs sp-loading-indicator la-sm">
          <div></div>
          <div></div>
          <div></div>
        </div>
      </div>

      <li ng-repeat="item in visibleItems" ng-class="{dropdown: item.items.length > 0, 'header-menu-item': true}"
        ng-include="'teamOnlineMainMenu'" role="presentation"></li>
      <li ng-if="data.canEdit">
        <sp-widget widget="newArticle"></sp-widget>
      </li>
    </ul>
  </nav> -->


  <nav class="navbar navbar-default header__nav-wrap " role="navigation">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" ng-click="isNavCollapsed = !isNavCollapsed">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
    </div>
    <div class="collapse navbar-collapse" uib-collapse="isNavCollapsed">
      <ul class="header__nav" aria-label="${Header menu}" role="menubar">
        <div class="header-loader" ng-class="{'invisible': !loadingIndicator}">
          <div class="hidden-xs sp-loading-indicator la-sm">
            <div></div>
            <div></div>
            <div></div>
          </div>
        </div>
        <li ng-repeat="item in visibleItems" ng-class="{dropdown: item.items.length > 0, 'header-menu-item': true}"
          ng-include="'teamOnlineMainMenu'" role="presentation"></li>
        <li ng-if="data.canEdit">
          <sp-widget widget="newArticle"></sp-widget>
        </li>
      </ul>
    </div>
  </nav>
</div>]]></template>
    </sp_widget>
</record_update>
